CREATE TABLE party (id BINARY(16) NOT NULL PRIMARY KEY, version BIGINT NOT NULL, identity VARCHAR(30) NOT NULL, type VARCHAR(20) NOT NULL, name VARCHAR(30) NOT NULL, email VARCHAR(80) NULL, enabled BIT(1) NOT NULL, creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, modification_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
CREATE UNIQUE INDEX unique_type_identity_idx ON party (type, identity);
CREATE INDEX identity_idx ON party (identity);
CREATE INDEX name_idx ON party (name);
CREATE INDEX type_idx ON party (type);
CREATE INDEX enabled_idx ON party (enabled);

CREATE TABLE party_rel (parent BINARY(16) NOT NULL, children BINARY(16) NOT NULL, CONSTRAINT PK_party_rel PRIMARY KEY (parent, children), CONSTRAINT FK_party_rel_parent FOREIGN KEY (parent) REFERENCES party (id), CONSTRAINT FK_party_rel_children FOREIGN KEY (children) REFERENCES party (id));
CREATE INDEX parent_idx ON party_rel (parent);
CREATE INDEX children_idx ON party_rel (children);

CREATE TABLE dag_edge (id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY, entry_edge_id BIGINT, direct_edge_id BIGINT, exit_edge_id BIGINT, start_vertex_id BINARY(16) NOT NULL, end_vertex_id BINARY(16) NOT NULL, hops INT NOT NULL, dag_id VARCHAR(150) NOT NULL, CONSTRAINT FK_dag_edge_start_vertex_id FOREIGN KEY (start_vertex_id) REFERENCES party (id), CONSTRAINT FK_dag_edge_end_vertex_id FOREIGN KEY (end_vertex_id) REFERENCES party (id));
CREATE INDEX entry_edge_id_idx ON dag_edge (entry_edge_id);
CREATE INDEX direct_edge_id_idx ON dag_edge (direct_edge_id);
CREATE INDEX exit_edge_id_idx ON dag_edge (exit_edge_id);
CREATE INDEX start_vertex_id_idx ON dag_edge (start_vertex_id);
CREATE INDEX end_vertex_id_idx ON dag_edge (end_vertex_id);
CREATE INDEX hops_idx ON dag_edge (hops);